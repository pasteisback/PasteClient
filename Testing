if not game.PlaceId == 17625359962 then
	local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
	local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
	local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

	local Window = Fluent:CreateWindow({
		Title = "PasteClient | RIVALS " .. Fluent.Version,
		SubTitle = "by RamingCactus",
		TabWidth = 160,
		Size = UDim2.fromOffset(580, 460),
		Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
		Theme = "Dark",
		MinimizeKey = Enum.KeyCode.RightShift -- Used when theres no MinimizeKeybind
	})

	local Tabs = {
		Main = Window:AddTab({ Title = "Main", Icon = "shield-alert" }),
		Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
	}

   -- loadstring(game:HttpGet("https://raw.githubusercontent.com/pasteisback/PasteClient/refs/heads/main/PlayerHud"))()


	local Options = Fluent.Options
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local runS = game:GetService("RunService")
    local pl = game:GetService("Players")
    local lp = pl.LocalPlayer
    local char = lp.Character or lp.CharacterAdded:Wait()
    local ws = game:GetService("Workspace")
    local camera = workspace.CurrentCamera
    local UIS = game:GetService("UserInputService")
    local mousePPos = UIS:GetMouseLocation()
    runS.RenderStepped:Connect(function() mousePPos = UIS:GetMouseLocation() end)
    local Center = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

    local FullSettings = {
        AimBot = {
            Checks = {
                TeamCheck = true,
                WallCheck = true,
                AliveCheck = true
            },
            Fov = {
                Enable = true,
                Visible = true,
                Thickness = 0.6,
                Color = Color3.fromRGB(255, 255, 255),
                LockColor = Color3.fromRGB(255, 0, 0),
                OffColor = Color3.fromRGB(150, 150, 150),
                Filled = false,
                Size = 60
            },
            Values = {
                Enable = true,
                Toggle = true,
                HitPart = "HitboxHead",
                HitPartList = {"Head", "LeftFoot", "LeftHand", "LeftLowerArm", "LeftLowerLeg", "LeftUpperArm", "LowerTorso", "RightFoot", "RightHand", "RightLowerArm", "RightLowerLeg", "RightUpperArm", "RightUpperLeg", "UpperTorso", "HitboxBody", "FakeMass", "HitboxBodySmall", "HumanoidRootPart"},
                TriggerKey = Enum.UserInputType.MouseButton2,
            }
        },
        Esp = {
            Checks = {
                TeamCheck = true,
                WallCheck = false,
                AliveCheck = true
            },
            Values = {
                Enabled = true,
                FillColor = Color3.fromRGB(255, 255, 255),
                FillTransparency = 0.5,
                OutlineColor = Color3.fromRGB(200, 200, 200),
                OutlineTransparency = 0
            }
        }
    }


	do
		Fluent:Notify({
			Title = "pasteclient on top",
			Content = "thanks for using pasteclient",
			SubContent = "by RamingCactus", -- Optional
			Duration = 7 -- Set to nil to make the notification not disappear
		})    


		Tabs.Main:AddButton({
			Title = "Aim-Assist",
			Description = "beta",
			Callback = function()
				local FOV = Drawing.new("Circle")
				FOV.Visible = FullSettings.AimBot.Fov.Visible
				FOV.Visible = FullSettings.AimBot.Fov.Enable
				FOV.Thickness = FullSettings.AimBot.Fov.Thickness
				FOV.Color = FullSettings.AimBot.Fov.Color
				FOV.Filled = FullSettings.AimBot.Fov.Filled
				FOV.Radius = FullSettings.AimBot.Fov.Size
				FOV.Position = mousePPos

				runS.RenderStepped:Connect(function() FOV.Position = mousePPos end)

				coroutine.wrap(function ()
					local lock = false

					local function GetPartToFov(Part)
						for _, v in ipairs(pl:GetPlayers()) do
							if v ~= lp and v.Character and v.Character:FindFirstChild(Part) then
								if FullSettings.AimBot.Checks.AliveCheck and v.Character:FindFirstChildOfClass("Humanoid") and v.Character.Humanoid.Health <= 0 then continue end

								local ray = workspace:FindPartOnRayWithIgnoreList(
									Ray.new(camera.CFrame.Position, 
										(v.Character[Part].Position - camera.CFrame.Position).Unit * 
											(v.Character[Part].Position - camera.CFrame.Position).Magnitude),
									{lp.Character, camera}
								)

								if FullSettings.AimBot.Checks.WallCheck and (not ray or not ray:IsDescendantOf(v.Character)) then continue end
								if FullSettings.AimBot.Checks.TeamCheck and v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("TeammateLabel") then continue end
								local vPos = camera:WorldToViewportPoint(v.Character[Part].Position)
								local distance = (Vector2.new(vPos.X, vPos.Y) - mousePPos).Magnitude

								if FullSettings.AimBot.Fov.Enable and (distance > FullSettings.AimBot.Fov.Size) then continue end
								return v
							end
						end
					end

					UIS.InputBegan:Connect(function(input, gameProcessedEvent)
						if gameProcessedEvent then return end
						if FullSettings.AimBot.Values.Toggle == false or FullSettings.AimBot.Values.TriggerKey == nil then
							lock = true
						else
							if input.UserInputType == FullSettings.AimBot.Values.TriggerKey then
								lock = not lock
							end
						end
					end)

					while task.wait() do
						if FullSettings.AimBot.Values.Enable then
							if not lp.PlayerGui.MainGui.MainFrame.Lobby.Currency.Visible then
								local Target = nil
								Target = GetPartToFov(FullSettings.AimBot.Values.HitPart)

								if Target ~= nil then
									FOV.Color = FullSettings.AimBot.Fov.LockColor
								else
									FOV.Color = FullSettings.AimBot.Fov.Color
								end

								if (FullSettings.AimBot.Values.Toggle == true and lock == false) or (FullSettings.AimBot.Values.Toggle == false and not UIS:IsMouseButtonPressed(FullSettings.AimBot.Values.TriggerKey)) then
									FOV.Color = FullSettings.AimBot.Fov.OffColor
								end


								if Target and Target.Character and Target.Character:FindFirstChild(FullSettings.AimBot.Values.HitPart) and lock and camera:WorldToViewportPoint(Target.Character[FullSettings.AimBot.Values.HitPart].Position).Z > 0 then
									if not FullSettings.AimBot.Values.Toggle and FullSettings.AimBot.Values.TriggerKey and not UIS:IsMouseButtonPressed(FullSettings.AimBot.Values.TriggerKey) then continue end
									camera.CFrame = CFrame.new(camera.CFrame.Position + (Target.Character[FullSettings.AimBot.Values.HitPart].Position - camera.CFrame.Position).Unit * 0.5, Target.Character[FullSettings.AimBot.Values.HitPart].Position)

									VirtualInputManager:SendMouseButtonEvent(Center.X, Center.Y, 0, true, game, 0)
									task.wait()
									VirtualInputManager:SendMouseButtonEvent(Center.X, Center.Y, 0, false, game, 0)
								end
							end
						end
					end
				end)()
			end
		})

		Tabs.Main:AddButton({
			Title = "ESP",
			Description = "beta",
			Callback = function()
				coroutine.wrap(function ()
					while task.wait() do
						for _, v in pairs(pl:GetPlayers()) do
							if v ~= lp and v.Character then
								local Esp = v.Character:FindFirstChild("Esp")

								if FullSettings.Esp.Checks.AliveCheck and v.Character:FindFirstChildOfClass("Humanoid") and v.Character.Humanoid.Health <= 0 then  if Esp then Esp:Destroy() end continue end
								if FullSettings.Esp.Checks.TeamCheck and v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("TeammateLabel") then if Esp then Esp:Destroy() end continue end
								if not Esp then
									Esp = Instance.new("Highlight")
									Esp.RobloxLocked = true
									Esp.Name = "Esp"
									Esp.Adornee = v.Character
									Esp.Parent = v.Character
								end

								if Esp then
									if FullSettings.Esp.Checks.WallCheck then
										Esp.DepthMode = Enum.HighlightDepthMode.Occluded
									else
										Esp.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
									end

									Esp.Enabled = FullSettings.Esp.Values.Enabled
									Esp.FillColor = FullSettings.Esp.Values.FillColor
									Esp.FillTransparency = FullSettings.Esp.Values.FillTransparency
									Esp.OutlineColor = FullSettings.Esp.Values.OutlineColor
									Esp.OutlineTransparency = FullSettings.Esp.Values.OutlineTransparency
								end
							end
						end
					end
				end)()
			end
		})

		local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Fly", Default = false })

		Toggle:OnChanged(function()
			local val = Options.MyToggle.Value
			local speeds = 1
			local speaker = game:GetService("Players").LocalPlayer
			local chr = game.Players.LocalPlayer.Character
			local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
			if val then
				val = false
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
				speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
			else
				val = true
				for i = 1, speeds do
					spawn(function()

						local hb = game:GetService("RunService").Heartbeat  


						tpwalking = true
						local chr = game.Players.LocalPlayer.Character
						local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
						while tpwalking and hb:Wait() and chr and hum and hum.Parent do
							if hum.MoveDirection.Magnitude > 0 then
								chr:TranslateBy(hum.MoveDirection)
							end
						end

					end)
				end
				game.Players.LocalPlayer.Character.Animate.Disabled = true
				local Char = game.Players.LocalPlayer.Character
				local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

				for i,v in next, Hum:GetPlayingAnimationTracks() do
					v:AdjustSpeed(0)
				end
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
				speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			end
			if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
				local plr = game.Players.LocalPlayer
				local torso = plr.Character.Torso
				local flying = true
				local deb = true
				local ctrl = {f = 0, b = 0, l = 0, r = 0}
				local lastctrl = {f = 0, b = 0, l = 0, r = 0}
				local maxspeed = 50
				local speed = 0

				local bg = Instance.new("BodyGyro", torso)
				bg.P = 9e4
				bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
				bg.cframe = torso.CFrame
				local bv = Instance.new("BodyVelocity", torso)
				bv.velocity = Vector3.new(0,0.1,0)
				bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
				if nowe == true then
					plr.Character.Humanoid.PlatformStand = true
				end
				while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
					game:GetService("RunService").RenderStepped:Wait()

					if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
						speed = speed+.5+(speed/maxspeed)
						if speed > maxspeed then
							speed = maxspeed
						end
					elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
						speed = speed-1
						if speed < 0 then
							speed = 0
						end
					end
					if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
					elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
					else
						bv.velocity = Vector3.new(0,0,0)
					end
					--  game.Players.LocalPlayer.Character.Animate.Disabled = true
					bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
				end
				ctrl = {f = 0, b = 0, l = 0, r = 0}
				lastctrl = {f = 0, b = 0, l = 0, r = 0}
				speed = 0
				bg:Destroy()
				bv:Destroy()
				plr.Character.Humanoid.PlatformStand = false
				game.Players.LocalPlayer.Character.Animate.Disabled = false
				tpwalking = false

			else
				local plr = game.Players.LocalPlayer
				local UpperTorso = plr.Character.UpperTorso
				local flying = true
				local deb = true
				local ctrl = {f = 0, b = 0, l = 0, r = 0}
				local lastctrl = {f = 0, b = 0, l = 0, r = 0}
				local maxspeed = 50
				local speed = 0

				local bg = Instance.new("BodyGyro", UpperTorso)
				bg.P = 9e4
				bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
				bg.cframe = UpperTorso.CFrame
				local bv = Instance.new("BodyVelocity", UpperTorso)
				bv.velocity = Vector3.new(0,0.1,0)
				bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
				if nowe == true then
					plr.Character.Humanoid.PlatformStand = true
				end
				while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
					wait()

					if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
						speed = speed+.5+(speed/maxspeed)
						if speed > maxspeed then
							speed = maxspeed
						end
					elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
						speed = speed-1
						if speed < 0 then
							speed = 0
						end
					end
					if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
					elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
					else
						bv.velocity = Vector3.new(0,0,0)
					end

					bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
				end
				ctrl = {f = 0, b = 0, l = 0, r = 0}
				lastctrl = {f = 0, b = 0, l = 0, r = 0}
				speed = 0
				bg:Destroy()
				bv:Destroy()
				plr.Character.Humanoid.PlatformStand = false
				game.Players.LocalPlayer.Character.Animate.Disabled = false
				tpwalking = false
			end
		end)
        Tabs.Main:AddButton({
            Title = "Noclip",
            Description = "beta",
            Callback = function()
                Window:Dialog({
                    Title = "Warning ⚠️",
                    Content = "You cannot turn this off. Continue?",
                    Buttons = {
                        {
                            Title = "Confirm",
                            Callback = function()
                                nam = game.Players.LocalPlayer.Name

	game:GetService('RunService').Stepped:connect(function()
		for a, b in pairs(game.Workspace:GetChildren()) do
			if b.Name == nam then
				for i, v in pairs(game.Workspace[nam]:GetChildren()) do
					if v:IsA("BasePart") then
						v.CanCollide = false

					end
				end
			end
		end
	end)

	Workspace[nam].Head.Changed:connect(function()
		for a, b in pairs(game.Workspace:GetChildren()) do
			if b.Name == nam then
				for i, v in pairs(game.Workspace[nam]:GetChildren()) do
					if v:IsA("BasePart") then
						v.CanCollide = false

					end
				end
			end
		end
		end)
                            end
                        },
                        {
                            Title = "Cancel",
                            Callback = function()
                                print("Cancelled the dialog.")
                            end
                        }
                    }
                })
            end
        })
	end
end

